apiVersion: apps/v1
kind: Deployment
metadata:
  name: ci-manager
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ci-manager.labels" . | nindent 4 }}
spec:
  progressDeadlineSeconds: 600
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: {{.Values.maxUnavailable}}
  selector:
    matchLabels:
      {{- include "ci-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ci-manager.selectorLabels" . | nindent 8 }}
    spec:
      {{ include "ci-manager.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "ci-manager.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30
      initContainers:
      {{- if .Values.global.database.mongo.installed }}
      - name: wait-for-harness-manager
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=harness-manager"
      {{- end }}
      containers:
        - name: ci-manager
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
              {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
          - name: http-ci-manager
            containerPort: {{.Values.service.port}}
            protocol: "TCP"
          - name: grpc-ci-manager
            containerPort: {{.Values.service.grpcport}}
            protocol: "TCP"
          resources:
              {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- include "harnesscommon.dbconnection.redisEnv" (dict "context" .Values.global.database.redis "userVariableName" "EVENTS_FRAMEWORK_REDIS_USERNAME" "passwordVariableName" "EVENTS_FRAMEWORK_REDIS_PASSWORD") | indent 12 }}
            {{- include "harnesscommon.dbconnection.mongoEnv" . | indent 12 }}
            - name: STO_SERVICE_GLOBAL_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.stoServiceGlobalToken.name }}
                  key: {{ .Values.stoServiceGlobalToken.key }}
            - name: MONGO_URI
              value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "harness" "context" $) }}
            - name: CIMANAGER_MONGO_URI
              value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "harness-ci" "context" $) }}
            - name: PMS_MONGO_URI
              value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "pms-harness" "context" $) }}
            {{- if .Values.global.database.timescaledb.installed }}
            - name : TIMESCALE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.timescaleSecret.password.name }}
                  key: {{ .Values.timescaleSecret.password.key }}
            - name: TIMESCALEDB_USERNAME
              value: postgres
            - name: TIMESCALE_URI
              value: 'jdbc:postgresql://timescaledb-single-chart.{{ .Release.Namespace }}:5432/harness'
            {{- else }}
            {{ include "harnesscommon.dbconnection.dbenvuser" (dict "type" "timescale" "variableName" "TIMESCALEDB_USERNAME" "secret" .Values.global.database.timescaledb.secretName "userKey" .Values.global.database.timescaledb.userKey ) | nindent 12 }}
            {{ include "harnesscommon.dbconnection.dbenvpassword" (dict "type" "timescale" "variableName" "TIMESCALE_PASSWORD" "secret" .Values.global.database.timescaledb.secretName "passwordKey" .Values.global.database.timescaledb.passwordKey ) | nindent 12 }}
            - name: TIMESCALE_URI
              value: 'jdbc:postgresql://{{ index .Values.global.database.timescaledb.hosts 0}}/harness'
            - name: TIMESCALEDB_SSL_MODE
              value: "require"
            - name: TIMESCALEDB_SSL_ROOT_CERT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.database.timescaledb.certName }}
                  key: {{ .Values.global.database.timescaledb.certKey }}
            {{- end }}
          envFrom:
          - configMapRef:
              name: ci-manager
          readinessProbe:
            httpGet:
              path: /health
              port: http-ci-manager
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 8
          livenessProbe:
            httpGet:
              path: /health
              port: http-ci-manager
            initialDelaySeconds: 40
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 20
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ci-manager
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
